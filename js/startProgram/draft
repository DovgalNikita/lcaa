const test = new CellularAutomaton;
let ctx = document.querySelector('#chartModel');
let selectedLevel = document.querySelector('#levels');
function html(data,foot) {
    
    //Задаём цвета
    const red = ["rgb(150,0,0)", "rgb(150,0,0,0.5)"];
    const yellow = ["rgb(255,215,0)", "rgb(255,215,0,0.5)"];
    const green = ["rgb(0,100,0)", "rgb(0,100,0,0.5)"];
    const colors = [red, yellow, green];
    /**Добвляем цвета к элементам*/
    var graphData = data.map((element) => {
      let color;
      let bcolor;
      if (element.level == 'Н') { color = colors[0][0]; bcolor = colors[0][1]; } else
        if (element.level == 'С') { color = colors[1][0]; bcolor = colors[1][1]; } else
          if (element.level == 'В') { color = colors[2][0]; bcolor = colors[2][1]; }
      return {
        ...element,
        "color": color,
        "bcolor": bcolor
      }

    })
    
    let labels = [];
    let values = [];
    let bColors = [];
    let Colors = [];
    //Заполняем данные для графика
    Object.values(graphData).forEach(element => {
      const date = element["date"].getDate() + "/" + element["date"].getMonth() + "/" + element["date"].getFullYear()
      labels.push(date);
      const value = element["value"];
      values.push(value);
      const color = element["color"];
      Colors.push(color);
      const bcolor = element["bcolor"];
      bColors.push(bcolor);
    });

    //создаем график
    const chart = new Chart(ctx, {

      type: 'bar',

      data: {

       labels: labels,

        datasets: [{
          type:"bar",
          label:"Значение ",
          showLegend:false,

          data: values,

          backgroundColor: bColors,

          borderColor: Colors,

          borderWidth: 1,
          
        },
      {label:"Высокий",
        type:'line',
        data:foot['В'].sort((a,b)=>{return a.index-b.index}),
        borderColor: green[0],
        xAxisID:'x',
        
      },{
        label:"Средний",
        type:'line',
        data:foot['С'].sort((a,b)=>{return a.index-b.index}),
        borderColor: yellow[0],
        xAxisID:'x',
        
      },
      {
        label:"Низкий",
        type:'line',
        data:foot['Н'].sort((a,b)=>{return a.index-b.index}),
        borderColor: red[0],
        xAxisID:'x',
        
      },]

      },

      options: {
        responsive: true,
        scales: {
          y: {
            min:Math.min(...values)-(Math.max(...values)-Math.min(...values))*0.2,
           
            display:true,
          },
          
          x:{beginAtZero: true,min:0,max:values.length,},
          
        }

      }

    });
    //Обрабатываем клик по столбцу
    ctx.onclick = async (e) => {
      const res = chart.getElementsAtEventForMode(
        e,
        'nearest',
        { intersect: true },
        true
      );
      if (res.length == 0) return;
      data[res[0].index].level = selectedLevel.value;
      foot[selectedLevel.value].push({x:chart.data.labels[res[0].index],y:data[res[0].index].value,index:res[0].index});
      console.log(foot);
      [data,foot]=test.FootPointsLevels(data,foot);
      chart.destroy();
      data = await test.Recalculate(data);
      
      html(data,foot);
      
    }
  
  }
await test.LoadData("здесь данные");
test.placeLevel();
html(test.sortedData,test.FootPoints);